user admin;
worker_processes 1; error_log logs/error.log; events {
    worker_connections 1024;
}
http {
    # These are some "magic" Nginx configuration options that aid in making WebSockets work properly with Passenger Standalone. Please learn more at http://nginx.org/en/docs/http/websocket.html
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }
	

    include mime.types;
	# Upstream to abstract backend connection(s) for php
	upstream php {
			server unix:/var/run/php5-fpm.sock;
			server 127.0.0.1:9000;
	}

	server {
		listen 80;
		location / {
			rewrite_by_lua_file /home/work/lua/pnl.lua;
		        #content_by_lua_file /home/work/lua/pnl.lua;
		}
		#location / {
		#	default_type text/html;
		#	content_by_lua 'ngx.say("host",ngx.var.host,"uri",ngx.var.request_uri,"y")';
		#}
	}

	server {
            listen 80;
			server_name blog.rewroute.com www.blog.rewroute.com;
			root /home/wordpress;
			index index.php;

			location = /favicon.ico {
					log_not_found off;
					access_log off;
			}

			location = /robots.txt {
					allow all;
					log_not_found off;
					access_log off;
			}

			location / {
					# This is cool because no php is touched for static content.
					# include the "?$args" part so non-default permalinks doesn't break when using query string
					try_files $uri $uri/ /index.php?$args;
                    
			}

			location ~ \.php$ { # this line
     				fastcgi_split_path_info ^(.+\.php)(/.+)$; #this line
     				fastcgi_pass   127.0.0.1:9000;
     				fastcgi_index  index.php;
     				fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name; # update this too
     				include        fastcgi.conf;
			}


			location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
					expires max;
					log_not_found off;
			}
	}



	server {
		listen 80;
		server_name rewroute.com www.rewroute.com;
		return 301 https://$http_host$request_uri;
	}

	server {
		listen 443 ssl;

		server_name rewroute.com www.rewroute.com;
		ssl_certificate /etc/letsencrypt/live/rewroute.com/fullchain.pem;
		ssl_certificate_key /etc/letsencrypt/live/rewroute.com/privkey.pem;
		ssl_session_timeout 1d;
		ssl_session_cache shared:SSL:50m;
		ssl_session_tickets off;
		ssl_dhparam /etc/letsencrypt/live/rewroute.com/dhparam.pem;
		ssl_prefer_server_ciphers on;
		ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
		ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';

		add_header Strict-Transport-Security max-age=31536000;

		root /home/staging/stagingapp;


        	location /.well-known/acme-challenge {
            	        root /home/staging/stagingapp/letsencrypt;
        	}


		location / {
			proxy_pass http://127.0.0.1:4000;
			# These are "magic" Nginx configuration options that should be present in order to make the reverse proxying work properly. Also contains some options that make WebSockets work properly with Passenger Standalone. 
			# Please learn more at http://nginx.org/en/docs/http/ngx_http_proxy_module.html
			proxy_http_version 1.1;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header Host $http_host;
            		proxy_set_header  X-Forwarded-Proto $scheme;
            		proxy_set_header  X-Forwarded-Ssl on;
            		proxy_set_header  X-Forwarded-Host $host;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection $connection_upgrade;
			proxy_buffering off;
		}
	}


	server {
		listen 80;
		server_name staging.rewroute.com www.staging.rewroute.com;
		return 301 https://$http_host$request_uri;
	}

	server {
		listen 443 ssl;

		server_name staging.rewroute.com www.staging.rewroute.com;
		ssl_certificate /etc/letsencrypt/live/staging.rewroute.com/fullchain.pem;
		ssl_certificate_key /etc/letsencrypt/live/staging.rewroute.com/privkey.pem;
		ssl_session_timeout 1d;
		ssl_session_cache shared:SSL:50m;
		ssl_session_tickets off;
		ssl_dhparam /etc/letsencrypt/live/staging.rewroute.com/dhparam.pem;
		ssl_prefer_server_ciphers on;
		ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
		ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';

		add_header Strict-Transport-Security max-age=31536000;

		root /home/stagingapp/stagingapp;


		location /.well-known/acme-challenge {
		    root /home/stagingapp/stagingapp/letsencrypt;
		}


		location / {
			proxy_pass http://127.0.0.1:4001;
			# These are "magic" Nginx configuration options that should be present in order to make the reverse proxying work properly. Also contains some options that make WebSockets work properly with Passenger Standalone. 
			# Please learn more at http://nginx.org/en/docs/http/ngx_http_proxy_module.html
			proxy_http_version 1.1;
			#i added dis here in order
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header Host $http_host;
                        proxy_set_header  X-Forwarded-Proto $scheme;
                        proxy_set_header  X-Forwarded-Ssl on;
                        proxy_set_header  X-Forwarded-Host $host;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection $connection_upgrade;
			proxy_buffering off;

			#everything i added
       			#proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
       			#proxy_set_header Host $http_host;
       			#proxy_set_header  X-Forwarded-Proto $scheme;
       			#proxy_set_header  X-Forwarded-Ssl on;
       			#proxy_set_header  X-Forwarded-Host $host;

		}
	}
	
}

